input {
    file {
    codec => multiline {
      pattern => "^{%{DATESTAMP_EVENTLOG}"
      what => "previous"
      negate => true
    }
    path => "/mnt/1C_logs/DB_NAME/1Cv8Log/*.lgp"
    file_completed_action => "log"
    file_completed_log_path => "/etc/logstash/file_input_tracking/DB_NAME"
    start_position => "beginning"
    stat_interval => 790
    type => "DB_NAME"
  }
}

filter {
  mutate {
    gsub => ["message","\n",""]
    gsub => ["message","\r",""]
  }
  mutate {
    remove_field => [ "host", "@version", "@timestamp" ]
    rename => [ "type", "Database" ]
  }
  ruby {
      code => "
          event.set('raw_log_file',event.get('path').split('/')[-1].gsub('.lgp','').slice(0..7))
      "
  }
  grok {
# U
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{DATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\"},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# S
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{DATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",\\"%{DATA:Data1}\\"},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# R
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",%{INT:ID}:%{GREEDYDATA:GUID}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 1
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{1,%{GREEDYDATA:Data1}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 2
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{2,%{GREEDYDATA:Data1}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
# P 6
    match => [ "message", "{%{DATESTAMP_EVENTLOG:Date},%{DATA:StatusTransaction},{%{DATA:Transaction},%{DATA:NumberTransaction}},%{INT:UserId},%{INT:ComputerId},%{INT:NameApplicationId},%{INT:Connection},%{INT:EventId},%{DATA:Importance},\\"%{GREEDYDATA:Comment}\\",%{INT:MetadataId},{\\"%{WORD:ArrayDataType}\\",{6,{%{GREEDYDATA:Data1}},{%{GREEDYDATA:Data2}}}},\\"%{DATA:RepresentationData}\\",%{INT:WorkServerId},%{INT:MainIpPort},%{INT:SecondIpPort},%{INT:Session},%{INT:MoreMetadata}" ]
  }
  date {
    match => [ "Date", "yyyyMMddHHmmss" ]
    target => "@timestamp"
    remove_field => [ "message", "Date", "path" ] 
  }
  translate {
    field => "[UserId]"
    destination => "[User]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_UserId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
  translate {
    field => "[NameApplicationId]"
    destination => "[NameApplication]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_NameApplicationId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
  translate {
    field => "[ComputerId]"
    destination => "[Computer]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_ComputerId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
  translate {
    field => "[EventId]"
    destination => "[Event]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_EventId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
  translate {
    field => "[MetadataId]"
    destination => "[Metadata]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_MetadataId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
  translate {
    field => "[WorkServerId]"
    destination => "[WorkServer]"
    dictionary_path => "/etc/logstash/conf.d/custom_mapping_1C/DB_NAME_WorkServerId.yml"
    refresh_interval => 104
    fallback => "Nothing to match!"
  }
}

output {
#  file { path => "/var/lib/elasticsearch/tmp/debug.log" }
  elasticsearch {
      hosts => ["127.0.0.1:9200"]
      manage_template => true
      template_overwrite => true
      template_name => "1cv8log"
      template => "/etc/logstash/mappings/1Cv8Log.json"
      index => "1c_DB_NAME-%{raw_log_file}"
   }
}